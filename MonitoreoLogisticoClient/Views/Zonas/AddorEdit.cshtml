@model MonitoreoLogisticoClient.Models.Zona

@{
    ViewBag.Title = "AddorEdit";
}

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBK2dtqBK4ZsR1ybBGUJzVwpCMFUrFQdD4&libraries=drawing&callback=initMap"
        async defer></script>


<script>



    var myArray = new Array();
    var puntos = [];

    @foreach (var d in Model.datos)
    {
        @:puntos = [];
        foreach (var c in d.coordenadas)
        {
            @:puntos.push({lat: @c.lat,lng: @c.lng})
        }

        @:myArray.push({ zona: "@d.zonaid", parametros: puntos});
    }

    console.log("datos",myArray);
    console.log("punto",puntos);

    var map;
    var markersArray = [];
    function initMap() {

        var coords = [];

        var zonas = [];

        @foreach(var c in ViewBag.CoordenadasListItems)
        {
            @:coords.push({lat: @c.Latitud,lng: @c.Longitud});
        }
        console.log("COORDENADAS",coords);



        var mapOptions = {
            center: { lat: -17.78218, lng: -63.17472 },
            zoom: 14
        }

        var drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,


            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: ['polygon']
            },
            markerOptions: {
                //icon: 'https://png.icons8.com/metro/1600/car.png'
            },
            polygonOptions: {
                fillColor: '#1a1aff',
                clickable: true,
                fillOpacity: 0.5,
                editable: true,
                clickable: true,
                draggable: true
            },

            circleOptions: {
                fillColor: '#ffff00',
                fillOpacity: 1,
                strokeWeight: 5,
                clickable: true,
                editable: true,
                zIndex: 1
            }
        });

        map = new google.maps.Map(document.getElementById("map"), mapOptions);
        drawingManager.setMap(map);

        if(typeof myArray !== 'undefined' && myArray.length > 0){

            console.log("Hay datos mapas");
            
            for (var i = 0; i < myArray.length; i++) {
                var dato = myArray[i];
                if(dato.parametros.length > 0){
                    var polygonDraw = new google.maps.Polygon({
                        paths: dato.parametros,
                        strokeColor: '#FF0000',
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: '#FF0000',
                        fillOpacity: 0.35,
                        editable: true,
                        clickable: true,
                        draggable: true
                    });
                    polygonDraw.setMap(map);
                
                }
                
            }
        
        }


        if(typeof coords !== 'undefined' && coords.length > 0){


            if(drawingManager.getMap()) {
                drawingManager.setMap(null); // Used to disable the Circle tool
            }
            drawingManager.setOptions({
                drawingMode : google.maps.drawing.OverlayType.CIRCLE,
                drawingControl : false,
                drawingControlOptions : {
                    position : google.maps.ControlPosition.TOP_CENTER,
                    drawingModes : [google.maps.drawing.OverlayType.CIRCLE]
                }
            });


            console.log("Hay datos");
            var polygonDraw = new google.maps.Polygon({
                paths: coords,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                editable: true,
                clickable: true,
                draggable: true
            });
            polygonDraw.setMap(map);

        }else{
            console.log("No hay datos");
        }


        //alert(initialCoord);


        google.maps.event.addListener(drawingManager, 'polygoncomplete', function (polygon) {
            drawingManager.setDrawingMode(null);
            //alert("poligonocompletado")

            markersArray = [];
            var path = polygon.getPath();
            var len = path.getLength();
            var coordStr = ' ';
            for (var i = 0; i < len; i++) {
                coordStr += path.getAt(i).toUrlValue(6) + "\n";
                markersArray.push(path.getAt(i).toJSON());
            }
            console.log(coordStr);
            document.getElementById("Coordenadas").value = JSON.stringify(markersArray);
            console.log("markersArray", markersArray);
            //alert("markersArray" + JSON.stringify(markersArray))


            polygon.setOptions({
                editable: true,
                draggable: true
            });

            google.maps.event.addListener(polygon, 'click', function () {
                console.log(this.getPath().getArray().toString());
            });

            google.maps.event.addListener(polygon, 'dragend', function () {
                console.log(this.getPath().getArray().toString());
            });

            google.maps.event.addListener(polygon.getPath(), "insert_at", getPath);
            google.maps.event.addListener(polygon.getPath(), "remove_at", getPath);
            google.maps.event.addListener(polygon.getPath(), "set_at", getPath);

            function getPath() {
                var path = polygon.getPath();
                var len = path.getLength();
                var coordStr = ' ';
                for (var i = 0; i < len; i++) {
                    coordStr += this.getAt(i).toUrlValue(6) + "\n";
                }
                console.log(coordStr);
                document.getElementById("Coordenadas").value = coordStr;
            }

        });





    }


</script>



<h2>Zona</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.Coordenadas);

    <div class="form-horizontal">
        <h4>Datos de Zona</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Coordenadas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-10">
                @Html.EditorFor(model => model.Coordenadas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>*@


        <div class="form-group">
            <div id="map" style="height: 800px; width: 100%"></div>

        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar Cambios" class="btn btn-default" />
            </div>
        </div>
    </div>

    <div id="info"></div>

}






<div>
    @Html.ActionLink("Volver a Listado", "Index")
</div>

