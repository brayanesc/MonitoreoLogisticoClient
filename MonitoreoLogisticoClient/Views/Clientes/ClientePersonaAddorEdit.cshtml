@model MonitoreoLogisticoClient.Models.Dtos.ClientePersona_dto

@{
    ViewBag.Title = "Cliente";
}

<h2>Cliente Persona</h2>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBK2dtqBK4ZsR1ybBGUJzVwpCMFUrFQdD4&libraries=drawing&callback=initMap"
        async defer></script>
<script type="text/javascript">
    function initMap() {
        var latlng = { lat: -17.78218, lng: -63.17472 };

        var initialLat = document.getElementById("Latitud").value;
        var initialLng = document.getElementById("Longitud").value;

        console.log("InitialLat", initialLat);
        console.log("InitialLng", initialLng);

        if (initialLat !== "" && initialLng !== "") {
            console.log("Coordinates located");
            latlng = { lat: parseFloat(initialLat), lng: parseFloat(initialLng) };
        }


        var mapOptions = {
            center: latlng,
            zoom: 14
        }
        var map = new google.maps.Map(document.getElementById("map"), mapOptions);

        var marker = new google.maps.Marker({
            position: latlng,
            map: map
        });

        map.addListener('center_changed', function () {
            document.getElementById("Latitud").value = map.getCenter().lat();
            document.getElementById("Longitud").value = map.getCenter().lng();

            marker.setPosition({
                lat: map.getCenter().lat(),
                lng: map.getCenter().lng()
            });
        });



    }

    

</script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.Id);
    @Html.HiddenFor(model => model.ClientePersonaId);
    @Html.HiddenFor(model => model.UbicacionId);

    <div class="row">
        <div class="col-md-6">
            <div class="form-horizontal">
                <h4>Datos de Cliente</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.NombreCompleto, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NombreCompleto, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NombreCompleto, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CI, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CI, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CI, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Ocupacion, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Ocupacion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Ocupacion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="input-group col-md-10">
                        @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control date" } })
                        @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
                          <div class="input-group-append">
                            <span for="FechaNacimiento" class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Edad, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Edad, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Edad, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Sexo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Guardar Cambios" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <h4>Ubicacion del Cliente</h4>
            <hr />
            <div id="map" style="height: 500px"></div>

            <div class="form-group">
                @Html.LabelFor(model => model.Latitud, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Latitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Latitud, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Longitud, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Longitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Longitud, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Descripcion,6,2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>
    </div>


}

<div>
    @Html.ActionLink("Volver a Listado", "ClientesPersonas")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<style>
    #Descripcion {
        width: 100%;
    }
    .date {
        background: #fff !important; 
    }
</style>

<script type="text/javascript">

    $(function () {
        var curDate = moment().toDate();
        var dateNow = new Date();
        console.log("CurDate", curDate);
        var datepicker = $('#FechaNacimiento').datetimepicker({
            useCurrent: false,
            locale: 'es',
            format: 'DD/MM/YYYY',
            defaultDate: curDate,
            ignoreReadonly: true,
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-arrow-up",
                down: "fa fa-arrow-down",
                next: "fa fa-arrow-right",
                previous: "fa fa-arrow-left"
            }

        });

        $('#FechaNacimiento').on("dp.change", function (e) {
            var birthday = new Date(e.date);
            var ageInMilliseconds = new Date(curDate - birthday);
            var years = ageInMilliseconds / (24 * 60 * 60 * 1000 * 365.25);
            console.log("datepickervalue", Math.floor(years));
            document.getElementById("Edad").value = Math.floor(years);
        });

    });
</script>